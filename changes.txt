
project device/fsl/
diff --git a/common/extended/condeco-extended/src/com/condeco/ethernet/EthernetManager.java b/common/extended/condeco-extended/src/com/condeco/ethernet/EthernetManager.java
index 33cfb19..0716f6f 100644
--- a/common/extended/condeco-extended/src/com/condeco/ethernet/EthernetManager.java
+++ b/common/extended/condeco-extended/src/com/condeco/ethernet/EthernetManager.java
@@ -215,6 +215,27 @@ public class EthernetManager {
         if (info.getConnectMode().equals(EthernetDevInfo.ETHERNET_CONN_MODE_DHCP)) {
             IpConfiguration ipcfg = new IpConfiguration();
             ipcfg.ipAssignment = IpAssignment.DHCP;
+
+	    if(getSharedPreProxyAddress() =="")		
+		ipcfg.setProxySettings(IpConfiguration.ProxySettings.NONE);
+	    else
+		ipcfg.setProxySettings(IpConfiguration.ProxySettings.STATIC);
+
+	    String exclusionList = null;
+	    exclusionList=getSharedPreProxyExclusionList();
+	    
+	    int port = 0;
+	    try 
+	    {
+		port = Integer.parseInt(getSharedPreProxyPort());
+	    } catch(NumberFormatException e)
+	    {
+		Log.d(TAG, "Could not parse given port number");
+            }
+
+       	    ProxyInfo proxyProperties = new ProxyInfo(getSharedPreProxyAddress(), port, exclusionList);
+	    SystemProperties.set("rw.HTTP_PROXY", proxyProperties.getHost() + ":" + proxyProperties.getPort());
+	    ipcfg.setHttpProxy(proxyProperties);
             ethernetService.setConfiguration(ipcfg);
         } else {
             InterfaceConfiguration ifcg = null;
@@ -233,8 +254,29 @@ public class EthernetManager {
                 config.gateway = gwAddr;
                 if (info.getDnsAddr() != null)
                     config.dnsServers.add(InetAddress.getByName(info.getDnsAddr()));
-                   ipcfg.staticIpConfiguration = config;
-                  ethernetService.setConfiguration(ipcfg);
+
+		ipcfg.setStaticIpConfiguration(config);
+
+		if(getSharedPreProxyAddress() =="")		
+			ipcfg.setProxySettings(IpConfiguration.ProxySettings.NONE);
+	    	else
+			ipcfg.setProxySettings(IpConfiguration.ProxySettings.STATIC);
+
+		String exclusionList = null;
+		exclusionList=getSharedPreProxyExclusionList();
+
+		int port = 0;
+		try 
+		{
+		    port = Integer.parseInt(getSharedPreProxyPort());
+		} catch(NumberFormatException e){
+        	}
+
+		ProxyInfo proxyProperties = new ProxyInfo(getSharedPreProxyAddress(), port, exclusionList);
+        	SystemProperties.set("rw.HTTP_PROXY", proxyProperties.getHost() + ":" + proxyProperties.getPort());
+
+		ipcfg.setHttpProxy(proxyProperties);                
+                ethernetService.setConfiguration(ipcfg);
 
                 Log.d(TAG,"Static IP configuration succeeded");
             } catch (UnknownHostException e){
@@ -329,7 +371,7 @@ public class EthernetManager {
 
     public SharedPreferences sharedPreferences(){
         SharedPreferences sp = this.mContext.getSharedPreferences("ethernet",
-                Context.MODE_WORLD_WRITEABLE);
+                Context.MODE_PRIVATE);
         return sp;
     }
 

project frameworks/opt/net/ethernet/
diff --git a/java/com/android/server/ethernet/EthernetNetworkFactory.java b/java/com/android/server/ethernet/EthernetNetworkFactory.java
index d6d0def..f7b8129 100644
--- a/java/com/android/server/ethernet/EthernetNetworkFactory.java
+++ b/java/com/android/server/ethernet/EthernetNetworkFactory.java
@@ -336,15 +336,34 @@ class EthernetNetworkFactory {
 
         IpConfiguration config = mEthernetManager.getConfiguration();
 
-        if (config.getIpAssignment() == IpAssignment.STATIC) {
-            if (!setStaticIpAddress(config.getStaticIpConfiguration())) {
+        if (config.getIpAssignment() == IpAssignment.STATIC) 
+	{
+            if (!setStaticIpAddress(config.getStaticIpConfiguration())) 
+	    {
                 // We've already logged an error.
                 return;
             }
             linkProperties = config.getStaticIpConfiguration().toLinkProperties(mIface);
-        } else {
+   
+            if (config.getProxySettings() == ProxySettings.STATIC ||
+                config.getProxySettings() == ProxySettings.PAC) 
+	    {
+		linkProperties.setHttpProxy(config.getHttpProxy()); 
+            }
+              String tcpBufferSizes = mContext.getResources().getString(com.android.internal.R.string.config_ethernet_tcp_buffers);
+ 
+	    if (TextUtils.isEmpty(tcpBufferSizes) == false) 
+	    {
+                linkProperties.setTcpBufferSizes(tcpBufferSizes);
+            }
+
+        } 
+	else 
+	{
             mNetworkInfo.setDetailedState(DetailedState.OBTAINING_IPADDR, null, mHwAddr);
-            IpManager.Callback ipmCallback = new IpManager.Callback() {
+	}
+
+        IpManager.Callback ipmCallback = new IpManager.Callback() {
                 @Override
                 public void onProvisioningSuccess(LinkProperties newLp) {
                     mHandler.post(() -> onIpLayerStarted(newLp));
@@ -359,28 +378,34 @@ class EthernetNetworkFactory {
                 public void onLinkPropertiesChange(LinkProperties newLp) {
                     mHandler.post(() -> updateLinkProperties(newLp));
                 }
-            };
+        };
 
-            stopIpManager();
-            mIpManager = new IpManager(mContext, mIface, ipmCallback);
+        stopIpManager();
+        mIpManager = new IpManager(mContext, mIface, ipmCallback);
 
-            if (config.getProxySettings() == ProxySettings.STATIC ||
+        if (config.getProxySettings() == ProxySettings.STATIC ||
                     config.getProxySettings() == ProxySettings.PAC) {
                 mIpManager.setHttpProxy(config.getHttpProxy());
-            }
+        }
 
-            final String tcpBufferSizes = mContext.getResources().getString(
+        final String tcpBufferSizes = mContext.getResources().getString(
                     com.android.internal.R.string.config_ethernet_tcp_buffers);
-            if (!TextUtils.isEmpty(tcpBufferSizes)) {
+        if (!TextUtils.isEmpty(tcpBufferSizes)) {
                 mIpManager.setTcpBufferSizes(tcpBufferSizes);
-            }
-
-            final ProvisioningConfiguration provisioningConfiguration =
+        }
+    
+	if (config.getIpAssignment() == IpAssignment.STATIC)
+	{  
+            mIpManager.startProvisioning(config.getStaticIpConfiguration());
+	}
+	else
+	{
+		final ProvisioningConfiguration provisioningConfiguration =
                     mIpManager.buildProvisioningConfiguration()
                             .withProvisioningTimeoutMs(0)
                             .build();
-            mIpManager.startProvisioning(provisioningConfiguration);
-        }
+		mIpManager.startProvisioning(provisioningConfiguration);
+	}
     }
 
     /**
